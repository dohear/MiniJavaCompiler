/* MiniJava.java */
/* Generated By:JavaCC: Do not edit this line. MiniJava.java */
package Parse;
import java.util.LinkedList;
public class MiniJava implements MiniJavaConstants {

/********************/
/* MiniJava Grammar */
/********************/

// Goal 	::= 	MainClass ( ClassDeclaration | ThreadDeclaration )* <EOF>
  final public Absyn.Program Goal() throws ParseException {LinkedList<Absyn.ClassDecl> cl = new LinkedList<Absyn.ClassDecl>();
    MainClassDeclaration(cl);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLASS:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      if (jj_2_1(2147483647)) {
        ClassDeclaration(cl);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CLASS:{
          ThreadDeclaration(cl);
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(0);
{if ("" != null) return new Absyn.Program(cl);}
    throw new Error("Missing return statement in function");
}

// MainClass 	::= 	"class" Identifier "{" "public" "static" "void" "main" "(" "String" "[" "]" Identifier ")" "{" Statement "}" "}"
  final public Absyn.ClassDecl MainClassDeclaration(LinkedList<Absyn.ClassDecl> cl) throws ParseException {Absyn.ClassDecl cd;
 Absyn.Stmt stmt;
 Absyn.VarDecl var;
 Token name, arg;
 LinkedList<Absyn.MethodDecl> methods = new LinkedList<Absyn.MethodDecl>();
 LinkedList<Absyn.Formal> formals = new LinkedList<Absyn.Formal>();
 LinkedList<Absyn.VarDecl> locals = new LinkedList<Absyn.VarDecl>();
 LinkedList<Absyn.Stmt> stmts = new LinkedList<Absyn.Stmt>();
    jj_consume_token(CLASS);
    name = jj_consume_token(ID);
    jj_consume_token(LBRACE);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPAREN);
    jj_consume_token(String);
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
    arg = jj_consume_token(ID);
formals.add(new Absyn.Formal(new Absyn.ArrayType(new Absyn.IdentifierType("String")),arg.toString()));
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_2:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_2;
      }
      var = VarDeclaration();
locals.add(var);
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case IF:
      case NEW:
      case NULL:
      case TRUE:
      case WHILE:
      case BANG:
      case MINUS:
      case LPAREN:
      case LBRACE:
      case XINU:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      stmt = Statement();
stmts.add(stmt);
    }
    jj_consume_token(RBRACE);
    jj_consume_token(RBRACE);
methods.add(new Absyn.MethodDecl(null, false, "main", formals, locals, stmts, (new Absyn.IntegerLiteral(0))));
  cd = new Absyn.ClassDecl(name.toString(), null,  new LinkedList<Absyn.VarDecl>(), methods);
  cl.add(cd);
  {if ("" != null) return cd;}
    throw new Error("Missing return statement in function");
}

// ClassDeclaration 	::= 	"class" Identifier ( "extends" Identifier )? "{" ( VarDeclaration )* ( MethodDeclaration )* "}"
  final public Absyn.ClassDecl ClassDeclaration(LinkedList<Absyn.ClassDecl> cl) throws ParseException {Absyn.ClassDecl  cd;
 Absyn.MethodDecl md;
 Absyn.VoidDecl   vd;
 Absyn.VarDecl    fd;
 Token name = null, parent = null;
 String parStr = null;
 LinkedList<Absyn.VarDecl> fields     = new LinkedList<Absyn.VarDecl>();
 LinkedList<Absyn.MethodDecl> methods = new LinkedList<Absyn.MethodDecl>();
    jj_consume_token(CLASS);
    name = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXTENDS:{
      jj_consume_token(EXTENDS);
      parent = jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUBLIC:
      case VOID:
      case BOOLEAN:
      case INT:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      if (jj_2_3(2147483647)) {
        fd = FieldDeclaration();
fields.add(fd);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          md = MethodDeclaration();
methods.add(md);
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(RBRACE);
cd = new Absyn.ClassDecl(name.toString(), parent.toString(), fields, methods);
    cl.add(cd);
    {if ("" != null) return cd;}
    throw new Error("Missing return statement in function");
}

// ThreadDeclaration 	::= 	"class" Identifier "extends" "Thread" "{" ( VarDeclaration )* ( MethodDeclaration | RunDeclaration )* "}"
  final public Absyn.ThreadDecl ThreadDeclaration(LinkedList<Absyn.ClassDecl> cl) throws ParseException {Absyn.ThreadDecl cd;
 Absyn.MethodDecl md;
 Absyn.VoidDecl   vd;
 Absyn.VarDecl    fd;
 Token name = null;
 String parStr = null;
 LinkedList<Absyn.VarDecl> fields     = new LinkedList<Absyn.VarDecl>();
 LinkedList<Absyn.MethodDecl> methods = new LinkedList<Absyn.MethodDecl>();
    jj_consume_token(CLASS);
    name = jj_consume_token(ID);
    jj_consume_token(EXTENDS);
    jj_consume_token(THREAD);
    jj_consume_token(LBRACE);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUBLIC:
      case VOID:
      case BOOLEAN:
      case INT:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      if (jj_2_4(2147483647)) {
        fd = FieldDeclaration();
fields.add(fd);
      } else if (jj_2_5(2)) {
        vd = VoidDeclaration();
methods.add(vd);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          md = MethodDeclaration();
methods.add(md);
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(RBRACE);
cd = new Absyn.ThreadDecl(name.toString(), fields, methods);
  cl.add(cd);
  {if ("" != null) return cd;}
    throw new Error("Missing return statement in function");
}

// VarDeclaration 	::= 	Type Identifier ( = Expression )? ";"
  final public Absyn.VarDecl VarDeclaration() throws ParseException {Absyn.Type type = null;
 Token      name = null;
 Absyn.Expr init = null;
    //?????????? ("[" (<INTEGER_LITERAL>)? "]")? lookahead???
     type = Type();
    name = jj_consume_token(ID);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:{
        jj_consume_token(INTEGER_LITERAL);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      init = Expression();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
{if ("" != null) return new Absyn.VarDecl(type, name.toString(), init);}
    throw new Error("Missing return statement in function");
}

// MethodDeclaration 	::= 	"public" ( "synchronized" )? Type Identifier "(" ( Type Identifier ( "," Type Identifier )* )? ")" "{" ( VarDeclaration )* ( Statement )* "return" Expression ";" "}"
  final public Absyn.MethodDecl MethodDeclaration() throws ParseException {Absyn.Type returnType, paramType;
 Token methodName, paramName;
//	Absyn.Formal formal;
 Absyn.VarDecl var;
 Absyn.Stmt stmt;
 Absyn.Expr expr;
 boolean sync = false;
 LinkedList<Absyn.Formal> formals  = new LinkedList<Absyn.Formal>();
 LinkedList<Absyn.VarDecl> locals  = new LinkedList<Absyn.VarDecl>();
 LinkedList<Absyn.Stmt> stmts      = new LinkedList<Absyn.Stmt>();
    jj_consume_token(PUBLIC);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SYNCHRONIZED:{
      jj_consume_token(SYNCHRONIZED);
sync = true;
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    returnType = Type();
    methodName = jj_consume_token(ID);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:
    case BOOLEAN:
    case INT:
    case ID:{
      paramType = Type();
      paramName = jj_consume_token(ID);
formals.add(new Absyn.Formal(paramType, paramName.toString()));
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        paramType = Type();
        paramName = jj_consume_token(ID);
formals.add(new Absyn.Formal(paramType, paramName.toString()));
      }
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_8:
    while (true) {
      if (jj_2_6(2147483647)) {
        ;
      } else {
        break label_8;
      }
      var = VarDeclaration();
locals.add(var);
    }
    label_9:
    while (true) {
      if (jj_2_7(2147483647)) {
        ;
      } else {
        break label_9;
      }
      stmt = Statement();
stmts.add(stmt);
    }
    jj_consume_token(RETURN);
    expr = Expression();
    jj_consume_token(SEMICOLON);
    jj_consume_token(RBRACE);
{if ("" != null) return new Absyn.MethodDecl(returnType, sync, methodName.toString(), formals, locals, stmts, expr);}
    throw new Error("Missing return statement in function");
}

// VoidDeclaration 	::= 	"public" "void" Identifier "(" ( Type Identifier ( "," Type Identifier )* )? ")" "{" ( VarDeclaration )* ( Statement )* "}"
  final public Absyn.VoidDecl VoidDeclaration() throws ParseException {Token methodName = null;
 Absyn.VarDecl var;
 Absyn.Stmt stmt;
 LinkedList<Absyn.VarDecl> locals  = new LinkedList<Absyn.VarDecl>();
 LinkedList<Absyn.Stmt> stmts      = new LinkedList<Absyn.Stmt>();
    jj_consume_token(PUBLIC);
    jj_consume_token(VOID);
    methodName = jj_consume_token(ID);
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_10:
    while (true) {
      if (jj_2_8(2147483647)) {
        ;
      } else {
        break label_10;
      }
      var = VarDeclaration();
locals.add(var);
    }
    label_11:
    while (true) {
      if (jj_2_9(2147483647)) {
        ;
      } else {
        break label_11;
      }
      stmt = Statement();
stmts.add(stmt);
    }
    jj_consume_token(RBRACE);
{if ("" != null) return new Absyn.VoidDecl(methodName.toString(), locals, stmts);}
    throw new Error("Missing return statement in function");
}

// FieldDeclaration 	::= 	Type Identifier ";"
  final public Absyn.VarDecl FieldDeclaration() throws ParseException {Absyn.Type type;
 Token name;
    type = Type();
    name = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
{if ("" != null) return new Absyn.VarDecl(type, name.toString(), null);}
    throw new Error("Missing return statement in function");
}

//Statement	::=	
//"{" ( Statement )* "}"
//|	"if" "(" Expression ")" Statement ( "else" Statement )?
//|	"while" "(" Expression ")" Statement
//|	"Xinu" "." <ID> "(" ( Expression ( "," Expression )* )? ")" ";"
  final public 
Absyn.Stmt Statement() throws ParseException {Absyn.Stmt stmt;
  Absyn.Stmt stmt2;
  Absyn.Expr expr;
  Absyn.Expr expr2;
  Absyn.AssignableExpr assexpr;
  Token id;
  LinkedList<Absyn.Stmt> stmts = new LinkedList<Absyn.Stmt>();
  LinkedList<Absyn.Expr> exprs = new LinkedList<Absyn.Expr>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      jj_consume_token(LBRACE);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FALSE:
        case IF:
        case NEW:
        case NULL:
        case TRUE:
        case WHILE:
        case BANG:
        case MINUS:
        case LPAREN:
        case LBRACE:
        case XINU:
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_12;
        }
        stmt = Statement();
stmts.add(stmt);
      }
      jj_consume_token(RBRACE);
{if ("" != null) return new Absyn.BlockStmt(stmts);}
      break;
      }
    case IF:{
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      expr = Expression();
      jj_consume_token(RPAREN);
      stmt = Statement();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        stmt2 = Statement();
{if ("" != null) return new Absyn.IfStmt(expr, stmt, stmt2);}
        break;
        }
      default:
        jj_la1[16] = jj_gen;
{if ("" != null) return new Absyn.IfStmt(expr, stmt, null);}
      }
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      expr = Expression();
      jj_consume_token(RPAREN);
      stmt = Statement();
{if ("" != null) return new Absyn.WhileStmt(expr, stmt);}
      break;
      }
    case XINU:{
      jj_consume_token(XINU);
      jj_consume_token(DOT);
      id = jj_consume_token(ID);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case BANG:
      case MINUS:
      case LPAREN:
      case XINU:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case ID:{
        expr = Expression();
exprs.add(expr);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[17] = jj_gen;
            break label_13;
          }
          jj_consume_token(COMMA);
          expr = Expression();
exprs.add(expr);
        }
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
      jj_consume_token(SEMICOLON);
{if ("" != null) return new Absyn.XinuCallStmt(id.toString(), exprs);}
      break;
      }
    case FALSE:
    case NEW:
    case NULL:
    case TRUE:
    case BANG:
    case MINUS:
    case LPAREN:
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case ID:{
      assexpr = Assignable();
      jj_consume_token(ASSIGN);
      expr2 = Expression();
      jj_consume_token(SEMICOLON);
{if ("" != null) return new Absyn.AssignStmt(assexpr, expr2);}
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// Absyn.AssignableExpr Assignable():
// {
// Absyn.AssignableExpr expr1;
// Absyn.Expr expr2;
// Token name;
// }
// {

//   (LOOKAHEAD(1) name = <ID> {return new Absyn.IdentifierExpr(name.toString());}
// | expr1 = AssignableHelper()
//  {return expr1;})
// }
  final public 
Absyn.AssignableExpr Assignable() throws ParseException {Absyn.Expr expr1;
Absyn.Expr expr2;
Token name;
    expr1 = Expression();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        ;
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        break label_14;
      }
      jj_consume_token(LBRACKET);
      expr2 = Expression();
      jj_consume_token(RBRACKET);
{if ("" != null) return new Absyn.ArrayExpr(expr1,expr2);}
    }
{if ("" != null) return (Absyn.AssignableExpr)expr1;}
    throw new Error("Missing return statement in function");
}

  final public Absyn.Type Type() throws ParseException {Absyn.Type type;
    Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VOID:{
      jj_consume_token(VOID);
type = new Absyn.IdentifierType("Void");
      break;
      }
    case INT:{
      jj_consume_token(INT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        label_16:
        while (true) {
          jj_consume_token(LBRACKET);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER_LITERAL:{
            jj_consume_token(INTEGER_LITERAL);
            break;
            }
          default:
            jj_la1[22] = jj_gen;
            ;
          }
          jj_consume_token(RBRACKET);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRACKET:{
            ;
            break;
            }
          default:
            jj_la1[23] = jj_gen;
            break label_16;
          }
        }
type = new Absyn.ArrayType(new Absyn.IntegerType());
        break;
        }
      default:
        jj_la1[24] = jj_gen;
type = new Absyn.IntegerType();
      }
      break;
      }
    case BOOLEAN:{
      jj_consume_token(BOOLEAN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        label_17:
        while (true) {
          jj_consume_token(LBRACKET);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER_LITERAL:{
            jj_consume_token(INTEGER_LITERAL);
            break;
            }
          default:
            jj_la1[25] = jj_gen;
            ;
          }
          jj_consume_token(RBRACKET);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRACKET:{
            ;
            break;
            }
          default:
            jj_la1[26] = jj_gen;
            break label_17;
          }
        }
type = new Absyn.ArrayType(new Absyn.BooleanType());
        break;
        }
      default:
        jj_la1[27] = jj_gen;
type = new Absyn.BooleanType();
      }
      break;
      }
    case ID:{
      id = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACKET:{
        label_18:
        while (true) {
          jj_consume_token(LBRACKET);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER_LITERAL:{
            jj_consume_token(INTEGER_LITERAL);
            break;
            }
          default:
            jj_la1[28] = jj_gen;
            ;
          }
          jj_consume_token(RBRACKET);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRACKET:{
            ;
            break;
            }
          default:
            jj_la1[29] = jj_gen;
            break label_18;
          }
        }
type = new Absyn.ArrayType(new Absyn.IdentifierType(id.toString()));
        break;
        }
      default:
        jj_la1[30] = jj_gen;
type = new Absyn.IdentifierType(id.toString());
      }
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

  final public Absyn.Expr Expression() throws ParseException {Absyn.Expr expr;
    expr = AlphaExpression();
    ExpressionPrime(expr);
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  final public Absyn.Expr AlphaExpression() throws ParseException {Absyn.Expr expr = null;
    Absyn.Type type;
    Token id;
 java.util.LinkedList<Absyn.Expr> dimensions = new LinkedList<Absyn.Expr>();
 java.util.LinkedList<Absyn.Expr> args = new LinkedList<Absyn.Expr>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      jj_consume_token(LPAREN);
      expr = Expression();
      jj_consume_token(RPAREN);
{if ("" != null) return expr;}
      break;
      }
    case NEW:{
      jj_consume_token(NEW);
      type = Type();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
{if ("" != null) return new Absyn.NewObjectExpr(type);}
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        if (jj_2_11(2)) {
          jj_consume_token(LBRACKET);
          expr = Expression();
dimensions.add(expr);
          jj_consume_token(RBRACKET);
          label_19:
          while (true) {
            if (jj_2_10(2)) {
              ;
            } else {
              break label_19;
            }
            jj_consume_token(LBRACKET);
            label_20:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case FALSE:
              case NEW:
              case NULL:
              case TRUE:
              case BANG:
              case MINUS:
              case LPAREN:
              case XINU:
              case INTEGER_LITERAL:
              case STRING_LITERAL:
              case ID:{
                ;
                break;
                }
              default:
                jj_la1[32] = jj_gen;
                break label_20;
              }
              expr = Expression();
dimensions.add(expr);
            }
            jj_consume_token(RBRACKET);
          }
{if ("" != null) return new Absyn.NewArrayExpr(type, dimensions);}
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      expr = AlphaExpression();
{if ("" != null) return new Absyn.NegExpr(expr);}
      break;
      }
    case BANG:{
      jj_consume_token(BANG);
      expr = AlphaExpression();
{if ("" != null) return new Absyn.NotExpr(expr);}
      break;
      }
    case XINU:{
      jj_consume_token(XINU);
      jj_consume_token(DOT);
      id = jj_consume_token(ID);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case NEW:
      case NULL:
      case TRUE:
      case BANG:
      case MINUS:
      case LPAREN:
      case XINU:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case ID:{
        expr = Expression();
args.add(expr);
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[34] = jj_gen;
            break label_21;
          }
          jj_consume_token(COMMA);
          expr = Expression();
args.add(expr);
        }
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
{if ("" != null) return new Absyn.XinuCallExpr(id.toString(), args);}
      break;
      }
    case NULL:{
      jj_consume_token(NULL);
{if ("" != null) return new Absyn.NullExpr();}
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
{if ("" != null) return new Absyn.TrueExpr();}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
{if ("" != null) return new Absyn.FalseExpr();}
      break;
      }
    case INTEGER_LITERAL:{
      id = jj_consume_token(INTEGER_LITERAL);
{if ("" != null) return new Absyn.IntegerLiteral(Integer.parseInt(id.toString()));}
      break;
      }
    case STRING_LITERAL:{
      id = jj_consume_token(STRING_LITERAL);
{if ("" != null) return new Absyn.StringLiteral(id.toString());}
      break;
      }
    case ID:{
      id = jj_consume_token(ID);
{if ("" != null) return new Absyn.IdentifierExpr(id.toString());}
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Absyn.Expr ExpressionPrime(Absyn.Expr left) throws ParseException {Absyn.Expr right;
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GT:
      case LT:
      case EQ:
      case SC_OR:
      case SC_AND:
      case PLUS:
      case MINUS:
      case STAR:
      case SLASH:
      case LBRACKET:
      case DOT:{
        ;
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        break label_22;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SC_OR:{
        jj_consume_token(SC_OR);
        right = AlphaExpression();
left = new Absyn.OrExpr(left, right);
        break;
        }
      case SC_AND:{
        jj_consume_token(SC_AND);
        right = AlphaExpression();
left = new Absyn.AndExpr(left, right);
        break;
        }
      case EQ:{
        jj_consume_token(EQ);
        right = AlphaExpression();
left = new Absyn.EqualExpr(left, right);
        break;
        }
      case GT:{
        jj_consume_token(GT);
        right = AlphaExpression();
left = new Absyn.GreaterExpr(left, right);
        break;
        }
      case LT:{
        jj_consume_token(LT);
        right = AlphaExpression();
left = new Absyn.LesserExpr(left, right);
        break;
        }
      case PLUS:{
        jj_consume_token(PLUS);
        right = AlphaExpression();
left = new Absyn.AddExpr(left, right);
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        right = AlphaExpression();
left = new Absyn.SubExpr(left, right);
        break;
        }
      case STAR:{
        jj_consume_token(STAR);
        right = AlphaExpression();
left = new Absyn.MulExpr(left, right);
        break;
        }
      case SLASH:{
        jj_consume_token(SLASH);
        right = AlphaExpression();
left = new Absyn.DivExpr(left, right);
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        if (jj_2_12(2)) {
          jj_consume_token(LBRACKET);
          right = Expression();
          jj_consume_token(RBRACKET);
left = new Absyn.ArrayExpr(left, right);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DOT:{
            jj_consume_token(DOT);
            jj_consume_token(ID);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LPAREN:{
              jj_consume_token(LPAREN);
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case FALSE:
              case NEW:
              case NULL:
              case TRUE:
              case BANG:
              case MINUS:
              case LPAREN:
              case XINU:
              case INTEGER_LITERAL:
              case STRING_LITERAL:
              case ID:{
                right = Expression();
                label_23:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                  case COMMA:{
                    ;
                    break;
                    }
                  default:
                    jj_la1[38] = jj_gen;
                    break label_23;
                  }
                  jj_consume_token(COMMA);
                  right = Expression();
                }
                break;
                }
              default:
                jj_la1[39] = jj_gen;
                ;
              }
              jj_consume_token(RPAREN);
              break;
              }
            default:
              jj_la1[40] = jj_gen;
left = new Absyn.FieldExpr(left, null);
            }
            break;
            }
          default:
            jj_la1[42] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3R_AlphaExpression_566_4_63()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_AlphaExpression_564_4_62()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_AlphaExpression_562_4_61()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_AlphaExpression_552_13_98()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_524_5_30()) return true;
    return false;
  }

  private boolean jj_3R_AlphaExpression_560_4_60()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_AlphaExpression_551_11_87()
 {
    if (jj_3R_Expression_524_5_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AlphaExpression_552_13_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_AlphaExpression_558_4_59()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_AlphaExpression_556_4_58()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_VarDeclaration_363_2_25()
 {
    if (jj_3R_Type_498_5_33()) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_VarDeclaration_363_29_34()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_VarDeclaration_363_60_35()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_AlphaExpression_550_6_57()
 {
    if (jj_scan_token(XINU)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlphaExpression_551_11_87()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_524_5_30()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_AlphaExpression_546_7_55()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_AlphaExpression_537_2_41()) return true;
    return false;
  }

  private boolean jj_3R_AlphaExpression_541_11_86()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_AlphaExpression_548_4_56()
 {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_AlphaExpression_537_2_41()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_FieldDeclaration_421_2_26()) return true;
    return false;
  }

  private boolean jj_3R_AlphaExpression_539_6_54()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_Type_498_5_33()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlphaExpression_541_11_86()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    return false;
  }

  private boolean jj_3R_AlphaExpression_538_5_53()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_524_5_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_VoidDeclaration_404_2_27()) return true;
    return false;
  }

  private boolean jj_3R_AlphaExpression_537_2_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AlphaExpression_538_5_53()) {
    jj_scanpos = xsp;
    if (jj_3R_AlphaExpression_539_6_54()) {
    jj_scanpos = xsp;
    if (jj_3R_AlphaExpression_546_7_55()) {
    jj_scanpos = xsp;
    if (jj_3R_AlphaExpression_548_4_56()) {
    jj_scanpos = xsp;
    if (jj_3R_AlphaExpression_550_6_57()) {
    jj_scanpos = xsp;
    if (jj_3R_AlphaExpression_556_4_58()) {
    jj_scanpos = xsp;
    if (jj_3R_AlphaExpression_558_4_59()) {
    jj_scanpos = xsp;
    if (jj_3R_AlphaExpression_560_4_60()) {
    jj_scanpos = xsp;
    if (jj_3R_AlphaExpression_562_4_61()) {
    jj_scanpos = xsp;
    if (jj_3R_AlphaExpression_564_4_62()) {
    jj_scanpos = xsp;
    if (jj_3R_AlphaExpression_566_4_63()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_ClassDeclaration_317_23_31()
 {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_Expression_524_5_30()
 {
    if (jj_3R_AlphaExpression_537_2_41()) return true;
    if (jj_3R_ExpressionPrime_577_5_71()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_FieldDeclaration_421_2_26()) return true;
    return false;
  }

  private boolean jj_3R_Type_513_9_70()
 {
    return false;
  }

  private boolean jj_3R_Type_512_10_81()
 {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_Type_512_9_69()
 {
    Token xsp;
    if (jj_3R_Type_512_10_81()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Type_512_10_81()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Type_510_7_47()
 {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Type_512_9_69()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_513_9_70()) return true;
    }
    return false;
  }

  private boolean jj_3R_Type_508_9_68()
 {
    return false;
  }

  private boolean jj_3R_Type_507_10_80()
 {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_ClassDeclaration_320_5_43()
 {
    if (jj_3R_MethodDeclaration_383_2_64()) return true;
    return false;
  }

  private boolean jj_3R_Type_507_9_67()
 {
    Token xsp;
    if (jj_3R_Type_507_10_80()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Type_507_10_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ClassDeclaration_318_4_42()
 {
    if (jj_3R_FieldDeclaration_421_2_26()) return true;
    return false;
  }

  private boolean jj_3R_ClassDeclaration_318_4_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ClassDeclaration_318_4_42()) {
    jj_scanpos = xsp;
    if (jj_3R_ClassDeclaration_320_5_43()) return true;
    }
    return false;
  }

  private boolean jj_3R_Type_505_7_46()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Type_507_9_67()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_508_9_68()) return true;
    }
    return false;
  }

  private boolean jj_3R_Type_503_9_66()
 {
    return false;
  }

  private boolean jj_3R_Assignable_484_28_73()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Assignable_485_6_83()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Type_502_10_79()
 {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_Type_502_9_65()
 {
    Token xsp;
    if (jj_3R_Type_502_10_79()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Type_502_10_79()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ClassDeclaration_317_2_24()
 {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ClassDeclaration_317_23_31()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ClassDeclaration_318_4_32()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_Type_500_8_45()
 {
    if (jj_scan_token(INT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Type_502_9_65()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_503_9_66()) return true;
    }
    return false;
  }

  private boolean jj_3R_Type_499_5_44()
 {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_Type_498_5_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Type_499_5_44()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_500_8_45()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_505_7_46()) {
    jj_scanpos = xsp;
    if (jj_3R_Type_510_7_47()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Assignable_486_6_84()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_Assignable_485_6_83()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_524_5_30()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_Assignable_486_5_74()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Assignable_486_6_84()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Assignable_484_5_52()
 {
    if (jj_3R_Expression_524_5_30()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Assignable_484_28_73()) {
    jj_scanpos = xsp;
    if (jj_3R_Assignable_486_5_74()) return true;
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_VarDeclaration_363_2_25()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_ClassDeclaration_317_2_24()) return true;
    return false;
  }

  private boolean jj_3R_Statement_459_6_40()
 {
    if (jj_3R_Assignable_484_5_52()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_Expression_524_5_30()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_Statement_456_6_72()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_524_5_30()) return true;
    return false;
  }

  private boolean jj_3R_Statement_455_6_51()
 {
    if (jj_3R_Expression_524_5_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Statement_456_6_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Statement_454_3_39()
 {
    if (jj_scan_token(XINU)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Statement_455_6_51()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_Statement_451_4_38()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_524_5_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Statement_443_3_28()) return true;
    return false;
  }

  private boolean jj_3R_Statement_450_5_50()
 {
    return false;
  }

  private boolean jj_3R_Statement_449_5_49()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_Statement_443_3_28()) return true;
    return false;
  }

  private boolean jj_3R_Statement_448_3_37()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_524_5_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Statement_443_3_28()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Statement_449_5_49()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_450_5_50()) return true;
    }
    return false;
  }

  private boolean jj_3R_Statement_444_6_48()
 {
    if (jj_3R_Statement_443_3_28()) return true;
    return false;
  }

  private boolean jj_3R_AlphaExpression_543_97_29()
 {
    if (jj_3R_Expression_524_5_30()) return true;
    return false;
  }

  private boolean jj_3R_Statement_443_3_36()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Statement_444_6_48()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_Statement_443_3_28()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Statement_443_3_36()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_448_3_37()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_451_4_38()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_454_3_39()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_459_6_40()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_ExpressionPrime_590_40_102()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Expression_524_5_30()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AlphaExpression_543_97_29()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_VarDeclaration_363_60_35()
 {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_Expression_524_5_30()) return true;
    return false;
  }

  private boolean jj_3R_FieldDeclaration_421_2_26()
 {
    if (jj_3R_Type_498_5_33()) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(59)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_Statement_443_3_28()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_VarDeclaration_363_2_25()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionPrime_590_17_101()
 {
    if (jj_3R_Expression_524_5_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpressionPrime_590_40_102()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ExpressionPrime_591_11_100()
 {
    return false;
  }

  private boolean jj_3R_ExpressionPrime_590_11_99()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionPrime_590_17_101()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_VoidDeclaration_404_2_27()
 {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_ExpressionPrime_588_7_97()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionPrime_590_11_99()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionPrime_591_11_100()) return true;
    }
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_524_5_30()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_ExpressionPrime_586_7_96()
 {
    if (jj_scan_token(SLASH)) return true;
    if (jj_3R_AlphaExpression_537_2_41()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_Statement_443_3_28()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionPrime_585_7_95()
 {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_AlphaExpression_537_2_41()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionPrime_584_7_94()
 {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_AlphaExpression_537_2_41()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_VarDeclaration_363_2_25()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionPrime_583_7_93()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_AlphaExpression_537_2_41()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionPrime_582_7_92()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_AlphaExpression_537_2_41()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionPrime_581_7_91()
 {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_AlphaExpression_537_2_41()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionPrime_580_7_90()
 {
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_AlphaExpression_537_2_41()) return true;
    return false;
  }

  private boolean jj_3R_MethodDeclaration_383_13_75()
 {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_ExpressionPrime_579_7_89()
 {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_AlphaExpression_537_2_41()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionPrime_578_7_88()
 {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_AlphaExpression_537_2_41()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionPrime_578_7_82()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExpressionPrime_578_7_88()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionPrime_579_7_89()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionPrime_580_7_90()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionPrime_581_7_91()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionPrime_582_7_92()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionPrime_583_7_93()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionPrime_584_7_94()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionPrime_585_7_95()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionPrime_586_7_96()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_ExpressionPrime_588_7_97()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_VarDeclaration_363_29_34()
 {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_MethodDeclaration_384_8_76()
 {
    if (jj_3R_Type_498_5_33()) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MethodDeclaration_385_4_85()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_MethodDeclaration_388_4_78()
 {
    if (jj_3R_Statement_443_3_28()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionPrime_577_5_71()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpressionPrime_578_7_82()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_MethodDeclaration_386_4_77()
 {
    if (jj_3R_VarDeclaration_363_2_25()) return true;
    return false;
  }

  private boolean jj_3R_MethodDeclaration_385_4_85()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Type_498_5_33()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_MethodDeclaration_383_2_64()
 {
    if (jj_scan_token(PUBLIC)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MethodDeclaration_383_13_75()) jj_scanpos = xsp;
    if (jj_3R_Type_498_5_33()) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_MethodDeclaration_384_8_76()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MethodDeclaration_386_4_77()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MethodDeclaration_388_4_78()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_Expression_524_5_30()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MiniJavaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[43];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x800,0x800,0x60840000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60840000,0x10000,0x0,0x60040000,0x60840000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60040000,0x0,0x0,0x60040000,0x60040000,0x0,0x0,0x60040000,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x40022000,0x0,0x848004,0x4,0x848004,0x4,0x0,0x0,0x8000000,0x80,0x0,0x848000,0x8000000,0x40022000,0x0,0x0,0x40002000,0x40022000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x848000,0x40002000,0x0,0x0,0x40002000,0x40002000,0x30000000,0x0,0x40002000,0x0,0x30000000,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x800,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x800,0x800,0x3cc4,0x0,0x800,0x0,0x3cc4,0x0,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x0,0x0,0x680805,0x0,0x400000,0x0,0x400000,0x0,0x10,0x80000,0x0,0x0,0x400,0x400000,0x0,0x680805,0x0,0x400,0x680801,0x680805,0x10,0x200,0x80000,0x10,0x10,0x80000,0x10,0x10,0x80000,0x10,0x10,0x400000,0x680801,0x1,0x400,0x680801,0x680801,0x210,0x400,0x680801,0x1,0x0,0x200,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJava(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJava(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new MiniJavaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJava(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new MiniJavaTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new MiniJavaTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJava(MiniJavaTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 43; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[122];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 43; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 122; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 12; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

                      }
